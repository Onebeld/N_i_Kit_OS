use std::time::Duration;
use dptree::{case, deps};
use is_url::is_url;
use log::LevelFilter;
use teloxide::{
    types::{InlineKeyboardButton, InlineKeyboardMarkup},
    prelude::*,
    Bot,
    utils::command::BotCommands,
    dispatching::{dialogue, dialogue::InMemStorage, UpdateHandler},
    types::{InputFile}
};
use crate::database::Links;

extern crate pretty_env_logger;
#[macro_use] extern crate log;

mod database;
mod website;

type HandlerResult = Result<(), Box<dyn std::error::Error + Send + Sync>>;
type MyDialogue = Dialogue<State, InMemStorage<State>>;

const SECONDS: u64 = 3600;

const STICKER_WELCOME: &str = "CAACAgIAAxkBAAEne6RlSyQM7sJfMXWBN3u-dfEgIlxzoAACBQADwDZPE_lqX5qCa011MwQ";
const STICKER_ERROR: &str = "CAACAgIAAxkBAAEne6JlSyP9VdH3N8Mk2imfp7BgFRu9NwACEAADwDZPE-qBiinxHwLoMwQ";

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É.")]
    Start,
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞.")]
    Menu,
    #[command(description = "–æ—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç.")]
    Cancel,

    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")]
    Help
}

#[derive(Clone, Default)]
enum State {
    #[default]
    Default,

    ReceiveLink,
    ReceiveLinkForChecking,
    ReceiveConfirmRemoveLinks,
    DeletingSomeLinks
}

#[tokio::main]
async fn main() -> HandlerResult {
    pretty_env_logger::formatted_timed_builder().filter_level(LevelFilter::Info).init();

    let bot = Bot::from_env();

    info!("The bot is up and running and ready to go!");

    launch_checkers(bot.clone());

    Dispatcher::builder(bot, schema())
        .dependencies(deps![InMemStorage::<State>::new()])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;

    Ok(())
}

/// Creates a separate standalone thread in which it checks the availability of sites in the
/// database every hour and if it is unavailable, informs the user
///
/// # Arguments
///
/// * `bot`: Bot instance
fn launch_checkers(bot: Bot) {
    let mut interval = tokio::time::interval(Duration::from_secs(SECONDS));

    info!("A thread has been launched to test sites.");

    tokio::spawn(async move {
        loop {
            interval.tick().await;

            info!("Runs a site checker");

            let all_links = database::get_all_links();

            for one_link in all_links {
                let user_id: UserId = UserId(one_link.user_id as u64);
                let status_code = website::get_request_code(&one_link.link).await;

                match status_code {
                    Ok(status_code_unwrapped) => {
                        handle_status_code(&bot, one_link.user_id as u64, one_link.link, status_code_unwrapped).await;
                    }
                    Err(err) => {
                        error!("Failed to verify the site for the user: {}. Description: {}", one_link.user_id, err.to_string());
                        let _ = bot.send_message(user_id, format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç –ø–æ —Å—Å—ã–ª–∫–µ: {}", one_link.link)).await;
                    }
                }
            }
        }
    });
}

/// Processes the site status code and sends a message to the user if there are any problems
///
/// # Arguments
///
/// * `bot`: A bot instance
/// * `user_id`: User ID in Telegram
/// * `link`: Site link
/// * `status_code`: Server status code
async fn handle_status_code(bot: &Bot, user_id: u64, link: String, status_code: u16) -> HandlerResult {
    let mut text = format!("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏: {link}");

    match status_code {
        403 => {
            text = format!("{text}\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {status_code}\n–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø");
        }
        404 => {
            text = format!("{text}\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {status_code}\n–≠—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
        500 => {
            text = format!("{text}\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {status_code}\n–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
        503 => {
            text = format!("{text}\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {status_code}\n–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }

        200..=299 | 300..=399 => { return Ok(()); }
        _ => {
            text = format!("{text}\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {status_code}");
        }
    }

    bot.send_sticker(UserId(user_id), InputFile::file_id(STICKER_ERROR)).await?;
    bot.send_message(UserId(user_id), text).await?;

    Ok(())
}

fn schema() -> UpdateHandler<Box<dyn std::error::Error + Send + Sync + 'static>> {
    let command_handler = teloxide::filter_command::<Command, _>()
        .branch(case![State::Default]
            .branch(case![Command::Start].endpoint(start))
            .branch(case![Command::Menu].endpoint(show_actions))
            .branch(case![Command::Help].endpoint(help)))
        .branch(case![State::ReceiveLink]
            .branch(case![Command::Cancel].endpoint(cancel_receive_link)))
        .branch(case![State::DeletingSomeLinks]
            .branch(case![Command::Cancel].endpoint(cancel_deleting_some_links)))
        .branch(case![State::ReceiveLinkForChecking]
            .branch(case![Command::Cancel].endpoint(cancel_receive_link)));

    let message_handler = Update::filter_message()
        .branch(command_handler)
        .branch(case![State::ReceiveLink].endpoint(receive_link))
        .branch(case![State::DeletingSomeLinks].endpoint(delete_some_links))
        .branch(case![State::ReceiveLinkForChecking].endpoint(check_site));

    let callback_query_handler = Update::filter_callback_query()
        .branch(case![State::Default].endpoint(menu_choice_callback_handler))
        .branch(case![State::ReceiveConfirmRemoveLinks].endpoint(menu_confirm_remove_links_callback_handler));

    dialogue::enter::<Update, InMemStorage<State>, State, _>()
        .branch(message_handler)
        .branch(callback_query_handler)
}

/// Displays a welcome message to the user
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `msg`: Message sent by the user
///
/// returns: Result<(), Box<dyn Error+Send+Sync, Global>>
async fn start(bot: Bot, msg: Message) -> HandlerResult {
    info!("A new user has joined the bot: {}", msg.from().expect("Unable to determine user ID").id);

    let text = format!("üöÄ –ü—Ä–∏–≤–µ—Ç, {}! –Ø - {}, –∏ —è –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –í–∞—à —Å–∞–π—Ç, —Ç–æ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –µ–∂–µ—á–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –æ—Ç—á—ë—Ç –æ —Å–±–æ—è—Ö –≤ —Ä–∞–±–æ—Ç–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –í–∞–º–∏ —Å–∞–π—Ç–∞.", msg.from().expect("Unable to define a user name").first_name, bot.get_me().await?.first_name);
    let keyboard = create_beginning_menu_keyboard().await;

    bot.send_sticker(msg.chat.id, InputFile::file_id(STICKER_WELCOME)).await?;
    bot.send_message(msg.chat.id, text).reply_markup(keyboard).await?;

    Ok(())
}

/// Sends a message to the user that displays all bot commands
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `msg`: Message sent by the user
async fn help(bot: Bot, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?;
    Ok(())
}

/// Event handler after a user clicks a button in the default state, which activates a bot action
/// depending on the selection
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `q`: Response from the user after pressing the button
async fn menu_choice_callback_handler(bot: Bot, dialogue: MyDialogue, q: CallbackQuery) -> HandlerResult {
    if let Some(data) = &q.data {
        if let Some(message) = q.clone().message {
            match data.as_str() {
                "begin" => show_actions(bot, message).await?,
                "check_link" => start_check_link(bot, dialogue, message).await?,
                "get_links" => get_all_links_from_user(bot, q).await?,
                "clear_all_links" => ask_about_clear_links(bot, dialogue, message).await?,
                "delete_some_links" => start_deleting_some_links(bot, dialogue, q).await?,

                "enter_link" => start_enter_link(bot, dialogue, message).await?,

                _ => (),
            }
        }
    }

    Ok(())
}

/// Event handler after the user clicks the button in the ReceiveConfirmRemoveHistories state,
/// which determines whether to delete the history or not
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `q`: Response from the user after pressing the button
async fn menu_confirm_remove_links_callback_handler(bot: Bot, dialogue: MyDialogue, q: CallbackQuery) -> HandlerResult {
    if let Some(data) = &q.data {
        if let Some(message) = &q.message {
            match data.as_str() {
                "confirm" => clear_links(bot, dialogue, q).await?,
                "cancel" => {
                    bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.").await?;
                    dialogue.update(State::Default).await?;
                },

                _ => (),
            }
        }
    }

    Ok(())
}

/// Sends a message to the user that displays the bot's action menu
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `msg`: Message sent by the user
async fn show_actions(bot: Bot, msg: Message) -> HandlerResult {
    let text = format!("{} –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", bot.get_me().await?.first_name);
    let keyboard = create_main_menu_keyboard().await;

    bot.send_message(msg.chat.id, text).reply_markup(keyboard).await?;

    Ok(())
}

/// Sends a message to the user asking for confirmation to clear the history
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `msg`: Message sent by the user
async fn ask_about_clear_links(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    let text = "‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Å—Å—ã–ª–∫–∏? ‚ùì";
    let keyboard = create_confirmation_menu_keyboard().await;

    bot.send_message(msg.chat.id, text).reply_markup(keyboard).await?;

    dialogue.update(State::ReceiveConfirmRemoveLinks).await?;

    Ok(())
}


/// Sends a message to the user telling them to enter a link and also goes to the ReceiveLink state
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `msg`: Message sent by the user
async fn start_enter_link(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel").await?;
    dialogue.update(State::ReceiveLink).await?;

    Ok(())
}

/// Sends a message to the user that a link needs to be entered, and enters the
/// ReceiveLinkForChecking state
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `msg`: Message sent by the user
async fn start_check_link(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel").await?;
    dialogue.update(State::ReceiveLinkForChecking).await?;

    Ok(())
}

async fn receive_link(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    let user_id = msg.from().expect("Unable to determine user ID").id;

    let mut url: String;

    match msg.text() {
        Some(text) => {
            url = text.to_string();
        }
        None => {
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É.").await?;
            return Ok(());
        }
    }

    if !website::has_http_s(&url) {
        url = format!("https://{}", url);
    }

    if is_url(&url) {
        if database::is_link_exists(user_id.0, &url) {
            bot.send_message(msg.chat.id, "–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞").await?;

            dialogue.update(State::Default).await?;

            return Ok(());
        }

        database::add_link(user_id.0, &url);

        info!("Added a new link to the database from the user: {}", user_id);

        bot.send_message(msg.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Å—ã–ª–∫—É! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å").await?;

        dialogue.update(State::Default).await?;
    }
    else {
        bot.send_message(msg.chat.id, "–î–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π!").await?;
    }

    Ok(())
}

/// Checks the site received from the user and sends the information to the user
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `msg`: Message sent by the user
async fn check_site(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    let mut url: String;

    match msg.text() {
        Some(text) => {
            url = text.to_string();
        }
        None => {
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É.").await?;
            return Ok(());
        }
    }

    if !website::has_http_s(&url) {
        url = format!("https://{}", url);
    }

    if is_url(&url) {
        let sent_message = bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...").await?;

        info!("Site information for the user is requested: {}", msg.from().expect("Unable to determine user ID").id.0);

        let site_information = website::get_site_information(&url).await?;

        let mut text = format!("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–≤–µ–¥–µ–Ω–æ–º –≤–∞–º–∏ —Å–∞–π—Ç–µ ‚ùî\n\n");

        text = format!("{text}üìù –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}\n", site_information.status_code);
        text = format!("{text}üïî –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {} –º–∏–ª–∏—Å–µ–∫—É–Ω–¥\n", site_information.duration);

        match site_information.has_robots {
            200 => {
                text = format!("{text}ü§ñ –ù–∞–ª–∏—á–∏–µ robots.txt: –µ—Å—Ç—å\n")
            }
            _ => {
                text = format!("{text}ü§ñ –ù–∞–ª–∏—á–∏–µ robots.txt: –Ω–µ—Ç (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {})\n", site_information.has_robots);
            }
        }
        match site_information.has_sitemap {
            200 => {
                text = format!("{text}üó∫ –ù–∞–ª–∏—á–∏–µ sitemap.xml: –µ—Å—Ç—å\n\n")
            }
            _ => {
                text = format!("{text}üó∫ –ù–∞–ª–∏—á–∏–µ sitemap.xml: –Ω–µ—Ç (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {})\n\n", site_information.has_sitemap);
            }
        }

        match site_information.certificate {
            Some(cert) => {
                text = format!("{text}üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:\
                \n–û–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {}\
                \n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {}\
                \n–°—Ç—Ä–∞–Ω–∞: {}\
                \n–ò–∑–¥–∞—Ç–µ–ª—å: {}\
                \n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {}\n\n", cert.intermediate.common_name,
                               cert.intermediate.organization,
                               cert.intermediate.country,
                               cert.intermediate.issuer,
                               cert.intermediate.time_to_expiration);
            }
            None => {
                text = format!("{text}üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n")
            }
        }

        bot.edit_message_text(msg.chat.id, sent_message.id, text).await?;

        dialogue.update(State::Default).await?;
    }
    else {
        bot.send_message(msg.chat.id, "–î–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π!").await?;
    }

    Ok(())
}

async fn cancel_receive_link(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏").await?;

    dialogue.update(State::Default).await?;

    Ok(())
}

async fn cancel_deleting_some_links(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫").await?;

    dialogue.update(State::Default).await?;

    Ok(())
}

// Creating bot menus
/// Creates a menu with a single button to start working with the bot
async fn create_beginning_menu_keyboard() -> InlineKeyboardMarkup {
    let mut keyboard: Vec<Vec<InlineKeyboardButton>> = vec![];

    let begin = InlineKeyboardButton::callback("–ü—Ä–∏—Å—Ç—É–ø–∏–º!", "begin");

    keyboard.push(vec![begin]);

    InlineKeyboardMarkup::new(keyboard)
}

/// Creates a bot action menu
async fn create_main_menu_keyboard() -> InlineKeyboardMarkup {
    let mut keyboard: Vec<Vec<InlineKeyboardButton>> = vec![];

    let check_link = InlineKeyboardButton::callback("üî≠ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç üî≠", "check_link");
    let enter_link = InlineKeyboardButton::callback("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç ‚úèÔ∏è", "enter_link");
    let links = InlineKeyboardButton::callback("üìí –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ üìí", "get_links");
    let delete_some_histories = InlineKeyboardButton::callback("‚úÇÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ ‚úÇÔ∏è", "delete_some_links");
    let clear_all_links = InlineKeyboardButton::callback("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ ‚ùå", "clear_all_links");

    keyboard.push(vec![check_link]);
    keyboard.push(vec![enter_link]);
    keyboard.push(vec![links]);
    keyboard.push(vec![delete_some_histories]);
    keyboard.push(vec![clear_all_links]);

    InlineKeyboardMarkup::new(keyboard)
}

/// Creates a menu where you must confirm the action of clearing all history
async fn create_confirmation_menu_keyboard() -> InlineKeyboardMarkup {
    let mut keyboard: Vec<Vec<InlineKeyboardButton>> = vec![];

    let confirmation = InlineKeyboardButton::callback("–û—á–∏—Å—Ç–∏—Ç—å", "confirm");
    let cancel = InlineKeyboardButton::callback("–û—Ç–º–µ–Ω–∞", "cancel");

    keyboard.push(vec![confirmation]);
    keyboard.push(vec![cancel]);

    InlineKeyboardMarkup::new(keyboard)
}
//

/// Retrieves all saved links by user ID and sends a message with the result
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `q`: Response from the user after pressing the button
async fn get_all_links_from_user(bot: Bot, q: CallbackQuery) -> HandlerResult {
    let user_id = q.from.id;
    let histories = database::get_all_links_from_user(user_id.0, None);

    info!("Receiving a request for all links from the user: {}", user_id);

    if histories.iter().count() == 0 {
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫").await?;
    }
    else {
        let str = create_links_list("–í–æ—Ç –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n", histories);
        bot.send_message(user_id, str).await?;
    }

    Ok(())
}

///
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `q`: Response from the user after pressing the button
async fn start_deleting_some_links(bot: Bot, dialogue: MyDialogue, q: CallbackQuery) -> HandlerResult {
    let user_id = q.from.id;
    let histories = database::get_all_links_from_user(user_id.0, None);

    if histories.iter().count() == 0 {
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è").await?;
    }
    else {
        let str = create_links_list("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /cancel.\n\n–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n", histories);

        bot.send_message(user_id, str).await?;
        dialogue.update(State::DeletingSomeLinks).await?;
    }

    Ok(())
}

/// Creates a formatted list of links
///
/// # Arguments
///
/// * `str`: Message to user
/// * `histories`: List of links
///
/// returns: Message to user with a formatted list of links
fn create_links_list(str: &str, links: Vec<Links>) -> String {
    let mut str = str.to_string();

    for i in 0..links.iter().count() {
        let link = format!("\n[{}] {}", i + 1, links[i].link);
        str.push_str(&link);
    }
    str
}

/// Removes some references from the database that the user enters and returns the result of
/// the operation
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `msg`: Message sent by the user
async fn delete_some_links(bot: Bot, dialogue: MyDialogue, msg: Message) -> HandlerResult {
    let numbers_string: String;
    let user_id = msg.from().expect("Unable to determine user ID").id.0;

    match msg.text() {
        Some(text) => {
            numbers_string = text.to_string();
        }
        None => {
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.").await?;
            return Ok(());
        }
    }

    let mut numbers: Vec<usize> = Vec::new();

    for number_string in numbers_string.split(" ") {
        let res = number_string.parse::<usize>();

        match res {
            Ok(number) => {
                numbers.push(number - 1);
            }
            Err(_) => {
                bot.send_message(msg.chat.id, "–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º!").await?;
                return Ok(());
            }
        }
    }

    let histories = database::get_all_links_from_user(user_id, None);
    let numbers_len = numbers.len();
    let mut links: Vec<&str> = Vec::new();

    for number in numbers {
        if number > numbers_len - 1 {
            bot.send_message(msg.chat.id, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ!").await?;
            return Ok(());
        }

        links.push(histories[number].link.as_str());
    }

    database::delete_some_histories(user_id, links);

    bot.send_message(msg.chat.id, "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã").await?;
    dialogue.update(State::Default).await?;

    Ok(())
}

/// Removes all references from the database from the user and returns the result of the operation
///
/// # Arguments
///
/// * `bot`: Bot instance
/// * `dialogue`: A handle for controlling dialogue state
/// * `q`: Response from the user after pressing the button
async fn clear_links(bot: Bot, dialogue: MyDialogue, q: CallbackQuery) -> HandlerResult {
    let user_id = q.from.id;

    database::clear_all_links(user_id.0);

    info!("Completely deleted the user's history: {}", user_id);

    bot.edit_message_text(user_id, q.message.unwrap().id, "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!").await?;

    dialogue.update(State::Default).await?;

    Ok(())
}